# -*- coding: utf-8 -*-
"""Movie recommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sSMPHyZI68l2eePP4g4GsXfG8YcS6A_y
"""

import pandas as pd
import numpy as np
import csv
#credits = pd.read_csv("tmdb_5000_credits.csv", header = None, delimiter="\t", quoting=csv.QUOTE_NONE, encoding='utf-8')
credits = pd.read_csv("tmdb_5000_credits.csv", quoting=3, error_bad_lines=False)
movies = pd.read_csv("tmdb_5000_movies.csv")
credits.head()

movies.head()

print("Credits:",credits.shape)
print("Movies Dataframe:",movies.shape)

df_device_data = pd.read_csv(r'E:/test.csv', encoding='utf-8', parse_dates=[1], low_memory=False) 
df_device_data['device_id'] = df_device_data['device_id'].astype(str)
df_common_car_info = pd.read_csv(r'E:/info.csv', encoding='utf-8', low_memory=False) 
df_common_car_info['device_id'] = df_common_car_info['device_id'].astype(str)
result = pd.merge(df_device_data, df_common_car_info, how='left', on='device_id')
result.to_csv(r'E:/result.csv', index=False, mode='w', header=True)

credits_column_renamed = credits.rename(index=str, columns={"movie_id": "id"})
credits_column_renamed["id"] = credits_column_renamed["id"].astype(str)
movies['id'] = movies['id'].astype(str)
df = movies
movies_merge = pd.merge(credits_column_renamed,df, on='id',how = "right")
print(movies_merge.head())

movies_cleaned_df = movies_merge.drop(columns=['homepage', 'title_x', 'title_y', 'status','production_countries'])
print(movies_cleaned_df.head())
print(movies_cleaned_df.info())
print(movies_cleaned_df.head(1)['overview'])

from sklearn.feature_extraction.text import TfidfVectorizer
tfv = TfidfVectorizer(min_df=3,  max_features=None,
            strip_accents='unicode', analyzer='word',token_pattern=r'\w{1,}',
            ngram_range=(1, 3),
            stop_words = 'english')

# Fitting the TF-IDF on the 'overview' text
tfv_matrix = tfv.fit_transform(movies_cleaned_df['overview'].values.astype('U'))
print(tfv_matrix)
print(tfv_matrix.shape)

from sklearn.metrics.pairwise import sigmoid_kernel

# Compute the sigmoid kernel
sig = sigmoid_kernel(tfv_matrix, tfv_matrix)
print(sig[0])

# Reverse mapping of indices and movie titles
indices = pd.Series(movies_cleaned_df.index, index=movies_cleaned_df['original_title']).drop_duplicates()
print(indices)
print(indices['Newlyweds'])
print(sig[4799])
print(list(enumerate(sig[indices['Newlyweds']])))
print(sorted(list(enumerate(sig[indices['Newlyweds']])), key=lambda x: x[1], reverse=True))

def give_recomendations(title, sig=sig):
    # Get the index corresponding to original_title
    idx = indices[title]

    # Get the pairwsie similarity scores
    sig_scores = list(enumerate(sig[idx]))

    # Sort the movies
    sig_scores = sorted(sig_scores, key=lambda x: x[1], reverse=True)

    # Scores of the 10 most similar movies
    sig_scores = sig_scores[1:11]

    # Movie indices
    movie_indices = [i[0] for i in sig_scores]

    # Top 10 most similar movies
    return movies_cleaned_df['original_title'].iloc[movie_indices]

print(give_recomendations('Avatar'))

print(give_recomendations('Tangled'))

print(give_recomendations("Spider-Man 3"))